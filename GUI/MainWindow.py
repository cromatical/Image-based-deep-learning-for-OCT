# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Temp\a.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import SubWindow as S
import Get_img as G
import os
import csv


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(882, 596)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.frame = QtWidgets.QFrame(self.splitter)
        self.frame.setMinimumSize(QtCore.QSize(596, 533))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")

        self.img_lb = QtWidgets.QLabel(self.frame)
        self.img_lb.setMaximumSize(QtCore.QSize(576, 266))
        self.img_lb.setText("")
        self.img_lb.setScaledContents(True)
        self.img_lb.setObjectName("img_lb")
        self.verticalLayout.addWidget(self.img_lb)

        self.heatmap_lb = QtWidgets.QLabel(self.frame)
        self.heatmap_lb.setMaximumSize(QtCore.QSize(576, 266))
        self.heatmap_lb.setText("")
        self.heatmap_lb.setScaledContents(True)
        self.heatmap_lb.setObjectName("heatmap_lb")
        self.verticalLayout.addWidget(self.heatmap_lb)

        self.gridLayoutWidget = QtWidgets.QWidget(self.splitter)
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.groupBox = QtWidgets.QGroupBox(self.gridLayoutWidget)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.CNV_bnt = QtWidgets.QRadioButton(self.groupBox)
        self.CNV_bnt.setObjectName("CNV_bnt")
        self.gridLayout_3.addWidget(self.CNV_bnt, 0, 0, 1, 1)
        self.DRUSEN_bnt = QtWidgets.QRadioButton(self.groupBox)
        self.DRUSEN_bnt.setObjectName("DRUSEN_bnt")
        self.gridLayout_3.addWidget(self.DRUSEN_bnt, 1, 0, 1, 1)
        self.DME_bnt = QtWidgets.QRadioButton(self.groupBox)
        self.DME_bnt.setObjectName("DME_bnt")
        self.gridLayout_3.addWidget(self.DME_bnt, 0, 1, 1, 1)
        self.NORMAL_bnt = QtWidgets.QRadioButton(self.groupBox)
        self.NORMAL_bnt.setObjectName("NORMAL_bnt")
        self.gridLayout_3.addWidget(self.NORMAL_bnt, 1, 1, 1, 1)
        self.gridLayout.addWidget(self.groupBox, 1, 0, 1, 2)

        tree = QtWidgets.QFileSystemModel()
        tree.setRootPath('C:\\')

        self.load_img_tree = QtWidgets.QTreeView(self.gridLayoutWidget)
        self.load_img_tree.setModel(tree)
        self.load_img_tree.setRootIndex(tree.index(r'C:\Medical AI\image list'))
        self.load_img_tree.setModel(tree)
        self.load_img_tree.setMinimumSize(QtCore.QSize(0, 0))
        self.load_img_tree.setMaximumSize(QtCore.QSize(16777215, 250))
        self.load_img_tree.setObjectName("load_img_tree")
        self.gridLayout.addWidget(self.load_img_tree, 0, 0, 1, 1)

        self.load_model_tree = QtWidgets.QTreeView(self.gridLayoutWidget)
        self.load_model_tree.setModel(tree)
        self.load_model_tree.setRootIndex(tree.index(r'C:\Medical AI\load model'))
        self.load_model_tree.setModel(tree)
        self.load_model_tree.setMaximumSize(QtCore.QSize(16777215, 250))
        self.load_model_tree.setObjectName("load_model_tree")
        self.gridLayout.addWidget(self.load_model_tree, 0, 1, 1, 1)


        self.pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 3, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 3, 1, 1, 1)
        self.groupBox_2 = QtWidgets.QGroupBox(self.gridLayoutWidget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.CNV_lb = QtWidgets.QLabel(self.groupBox_2)
        self.CNV_lb.setText("")
        self.CNV_lb.setObjectName("CNV_lb")
        self.gridLayout_2.addWidget(self.CNV_lb, 0, 1, 1, 1)
        self.NORMAL_box = QtWidgets.QCheckBox(self.groupBox_2)
        self.NORMAL_box.setEnabled(False)
        self.NORMAL_box.setObjectName("NORMAL_box")
        self.gridLayout_2.addWidget(self.NORMAL_box, 1, 2, 1, 1)
        self.DME_box = QtWidgets.QCheckBox(self.groupBox_2)
        self.DME_box.setEnabled(False)
        self.DME_box.setObjectName("DME_box")
        self.gridLayout_2.addWidget(self.DME_box, 0, 2, 1, 1)
        self.CNV_box = QtWidgets.QCheckBox(self.groupBox_2)
        self.CNV_box.setEnabled(False)
        self.CNV_box.setObjectName("CNV_box")
        self.gridLayout_2.addWidget(self.CNV_box, 0, 0, 1, 1)
        self.DRUSEN_box = QtWidgets.QCheckBox(self.groupBox_2)
        self.DRUSEN_box.setEnabled(False)
        self.DRUSEN_box.setObjectName("DRUSEN_box")
        self.gridLayout_2.addWidget(self.DRUSEN_box, 1, 0, 1, 1)
        self.DRUSEN_lb = QtWidgets.QLabel(self.groupBox_2)
        self.DRUSEN_lb.setText("")
        self.DRUSEN_lb.setObjectName("DRUSEN_lb")
        self.gridLayout_2.addWidget(self.DRUSEN_lb, 1, 1, 1, 1)
        self.DME_lb = QtWidgets.QLabel(self.groupBox_2)
        self.DME_lb.setText("")
        self.DME_lb.setObjectName("DME_lb")
        self.gridLayout_2.addWidget(self.DME_lb, 0, 3, 1, 1)
        self.NORMAL_lb = QtWidgets.QLabel(self.groupBox_2)
        self.NORMAL_lb.setText("")
        self.NORMAL_lb.setObjectName("NORMAL_lb")
        self.gridLayout_2.addWidget(self.NORMAL_lb, 1, 3, 1, 1)
        self.gridLayout.addWidget(self.groupBox_2, 2, 0, 1, 2)
        self.horizontalLayout.addWidget(self.splitter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.date = QtCore.QDate.currentDate()
        self.statusbar.showMessage(self.date.toString(QtCore.Qt.DefaultLocaleLongDate))

        # signal
        self.load_img_tree.doubleClicked.connect(self.doubleClick_function)
        self.load_model_tree.doubleClicked.connect(self.doubleClick_function_2)
        self.pushButton.clicked.connect(self.btn_function)
        self.pushButton_2.clicked.connect(self.btn_function_2)

        # result
        self.count = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

    def doubleClick_function(self, signal):
        self.file_path = self.load_img_tree.model().filePath(signal)
        self.file_path = r'{}'.format(self.file_path)
        self.file_name = self.load_img_tree.model().fileName(signal)
        pixmap = QtGui.QPixmap(self.file_path)
        self.img_lb.setPixmap(pixmap)
        self.heatmap_lb.clear()
        self.CNV_lb.clear()
        self.DME_lb.clear()
        self.DRUSEN_lb.clear()
        self.NORMAL_lb.clear()
        self.CNV_box.setChecked(False)
        self.DME_box.setChecked(False)
        self.DRUSEN_box.setChecked(False)
        self.NORMAL_box.setChecked(False)

    def doubleClick_function_2(self, signal):
        model_path = self.load_model_tree.model().filePath(signal)
        self.model = G.load_model(model_path)


    def btn_function(self):
        prediction, y_pred, heatmap = self.step1()
        heatmap_img = self.step2(heatmap)
        pixmap = QtGui.QPixmap(heatmap_img)
        self.heatmap_lb.setPixmap(pixmap)
        self.step3(prediction)
        self.step4(y_pred)
        sys.stdout.flush()


    def btn_function_2(self):
        SubWindow.show()

    def step1(self):
        prediction, y_pred, heatmap = G.Heatmap(self.model, self.file_path)
        return prediction, y_pred, heatmap

    def step2(self, heatmap):
        heatmap_img = G.get_Heatmap(self.file_path, self.file_name, heatmap)
        return heatmap_img

    def step3(self, pred):
        self.CNV_lb.setText("%0.4f" % pred[0][0])
        self.DME_lb.setText("%0.4f" % pred[0][1])
        self.DRUSEN_lb.setText("%0.4f" % pred[0][2])
        self.NORMAL_lb.setText("%0.4f" % pred[0][3])

    def step4(self, y_pred):
        if y_pred == 0:
            self.CNV_box.setChecked(True)
        elif y_pred == 1:
            self.DME_box.setChecked(True)
        elif y_pred == 2:
            self.DRUSEN_box.setChecked(True)
        else:
            self.NORMAL_box.setChecked(True)

        # result count++
        state = 0
        if self.CNV_bnt.isChecked() == True:
            state = 0
        elif self.DME_bnt.isChecked() == True:
            state = 1
        elif self.DRUSEN_bnt.isChecked() == True:
            state = 2
        elif self.NORMAL_bnt.isChecked() == True:
            state = 3

        if state != y_pred:
            self.save_csv()

        self.count[state][y_pred] += 1
        ui2.tableWidget.setItem(y_pred, state, QtWidgets.QTableWidgetItem("%d" % self.count[state][y_pred]))

    # csv파일 생성
    def save_csv(self):
        row = ['image_path']
        path = "C:/Medical AI/incorrect_image_path"
        csv_file_name = self.date.toString(QtCore.Qt.DefaultLocaleLongDate)[:11] + '.csv'
        save_path = os.path.join(path, csv_file_name)
        if os.path.exists(save_path):
            with open(save_path, 'a', encoding='utf-8', newline="") as f:
                wr = csv.writer(f)
                wr.writerow([self.file_path])
        else:
            with open(save_path, 'wt', encoding='utf-8', newline="") as f:
                wr = csv.writer(f)
                wr.writerow(row)
                wr.writerow([self.file_path])

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "진단 - 의사"))
        self.CNV_bnt.setText(_translate("MainWindow", "CNV"))
        self.DRUSEN_bnt.setText(_translate("MainWindow", "DRUSEN"))
        self.DME_bnt.setText(_translate("MainWindow", "DME"))
        self.NORMAL_bnt.setText(_translate("MainWindow", "NORMAL"))
        self.pushButton.setText(_translate("MainWindow", "진단"))
        self.pushButton_2.setText(_translate("MainWindow", "결과"))
        self.groupBox_2.setTitle(_translate("MainWindow", "진단 - AI"))
        self.NORMAL_box.setText(_translate("MainWindow", "NORMAL"))
        self.DME_box.setText(_translate("MainWindow", "DME"))
        self.CNV_box.setText(_translate("MainWindow", "CNV"))
        self.DRUSEN_box.setText(_translate("MainWindow", "DRUSEN"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    SubWindow = S.QtWidgets.QMainWindow()
    ui2 = S.Ui_SubWindow()
    ui2.setupUi(SubWindow)

    MainWindow.show()
    sys.exit(app.exec_())
